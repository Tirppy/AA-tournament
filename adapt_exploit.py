def strategy(my_history: list[int], opponent_history: list[int], rounds: int | None) -> int:
    if not my_history:
        return 1
    
    cooperation_rate = sum(opponent_history) / len(opponent_history)
    
    recent_window = min(5, len(opponent_history))
    recent_cooperation = sum(opponent_history[-recent_window:]) / recent_window
    
    end_game = rounds is not None and len(my_history) >= rounds - 8
    
    def is_tit_for_tat(my_history: list[int], opponent_history: list[int]) -> bool:
        if len(my_history) < 3:
            return False
        matches = 0
        for i in range(1, len(my_history)):
            if opponent_history[i] == my_history[i - 1]:
                matches += 1
        return matches / (len(my_history) - 1) > 0.8

    if cooperation_rate > 0.8:
        if (len(my_history) + 1) % 3 == 0:
            return 0
        return 1
    
    if 0.5 <= cooperation_rate <= 0.8:
        if opponent_history[-1] == 1:
            if recent_cooperation > 0.6:
                return 1
            return 0
        
        if opponent_history[-1] == 0:
            if len(my_history) % 2 == 0 and cooperation_rate > 0.65:
                return 1
            return 0

    if cooperation_rate < 0.5:
        if len(my_history) % 5 < 2 and recent_cooperation > 0.4:
            return 1
        return 0
    
    if len(opponent_history) >= 4:
        if opponent_history[-2:] == [0, 1] and opponent_history[-4:-2] == [0, 1]:
            return 1
            
    if end_game:
        return 0
    
    if cooperation_rate > 0.5:
        return 1
    return 0




def Womp(my_history: list[int], opponent_history: list[int], rounds: int | None) -> int:
    if not opponent_history:
        return 1


    cooperation_rate = sum(opponent_history) / len(opponent_history)

    recent_window = min(5, len(opponent_history))
    recent_cooperation = sum(opponent_history[-recent_window:]) / recent_window if recent_window > 0 else 0

    end_game = rounds is not None and len(my_history) >= rounds - 5

    if cooperation_rate > 0.8:
        if len(my_history) % 3 == 0:
            return 0

    if 0.5 <= cooperation_rate <= 0.8:
        if opponent_history[-1] == 1:
            if recent_cooperation > 0.6:
                return 0

        elif opponent_history[-1] == 0:
            if cooperation_rate > 0.65 and len(my_history) % 2 == 0:
                return 1
            return 0

    if cooperation_rate < 0.5:
        if recent_cooperation > 0.6 and opponent_history[-1] == 1:
            return 1
        return 0

    if len(opponent_history) >= 4:
        if opponent_history[-2:] == [0, 1] and opponent_history[-4:-2] == [0, 1]:
            return 0

        if len(my_history) >= 3:
            matches = sum(1 for i in range(len(my_history) - 3, len(my_history))
                          if opponent_history[i] == my_history[i - 1])
            if matches >= 3:
                return 1

    if end_game:
        return 0

    if len(my_history) % 5 < 2:
        return 1
    return 0 

def titfortat(my_history: list[int], opponent_history: list[int], rounds: int | None) -> int:
    if not opponent_history:
        return 1  # cooperate on first move
    return opponent_history[-1]  # mimic last move


def main():
    rounds = 20
    random_stop = True 

    s1_history = []
    s2_history = []

    for i in range(rounds):  

        move1 = strategy(s1_history, s2_history, rounds if not random_stop else None)
        move2 = Womp(s2_history, s1_history, rounds if not random_stop else None)

        s1_history.append(move1)
        s2_history.append(move2)

        print(f"Round {i + 1}: Strategy -> {move1} | Tit-for-Tat -> {move2}")

    total1 = total2 = 0
    for m1, m2 in zip(s1_history, s2_history):
        if m1 == 1 and m2 == 1:
            total1 += 3
            total2 += 3
        elif m1 == 0 and m2 == 0:
            total1 += 1
            total2 += 1
        elif m1 == 0 and m2 == 1:
            total1 += 5
        elif m1 == 1 and m2 == 0:
            total2 += 5

    print("\nFull History:")
    print("Strategy:    ", s1_history)
    print("Tit-for-Tat: ", s2_history)

    print(f"\nFinal Score:\nStrategy: {total1} points\nWomp: {total2} points")


if __name__ == "__main__":
    main()
