def strategy_round_2(
    opponent_id: int,
    my_history: dict[int, list[int]],
    opponents_history: dict[int, list[int]]
) -> tuple[int, int]:
    MAX_ROUNDS = 200

    my_hist = my_history.get(opponent_id, [])
    opp_hist = opponents_history.get(opponent_id, [])
    played = len(my_hist)

    if not my_hist:
        move = 1
    else:
        cooperation_rate = sum(opp_hist) / len(opp_hist)
        recent_window = min(5, len(opp_hist))
        recent_cooperation = sum(opp_hist[-recent_window:]) / recent_window
        end_game = played >= MAX_ROUNDS - 8

        if cooperation_rate > 0.8:
            move = 1
        elif 0.5 <= cooperation_rate <= 0.8:
            if opp_hist[-1] == 1:
                move = 1 if recent_cooperation > 0.6 else 0
            else:
                move = 1 if (played % 2 == 0 and cooperation_rate > 0.65) else 0
        elif cooperation_rate < 0.5:
            move = 1 if (played % 5 < 2 and recent_cooperation > 0.4) else 0
        elif len(opp_hist) >= 4 and opp_hist[-2:] == [0, 1] and opp_hist[-4:-2] == [0, 1]:
            move = 1
        elif end_game:
            move = 0
        else:
            move = 1 if cooperation_rate > 0.5 else 0

    base = [pid for pid, h in my_history.items() if len(h) < MAX_ROUNDS]  # 

    tol = 0
    cands = []
    while tol <= MAX_ROUNDS:
        cands = [
            pid for pid in base
            if opponents_history.get(pid, []).count(0) <= tol
        ]
        if cands:
            break
        tol += 1

    if opponent_id in cands:
        next_opponent = opponent_id
    else:
        next_opponent = min(cands) if cands else opponent_id

    return move, next_opponent